{
    "Description": "Effective DevOps in AWS: HelloWorld web application",
    "Outputs": {
        "WebUrl": {
            "Description": "Application endpoint",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "LoadBalancer",
                                "DNSName"
                            ]
                        },
                        ":",
                        "3000"
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "must be a valid EC2 T2 instance type.",
            "Default": "t2.micro",
            "Description": "WebServer EC2 instance type",
            "Type": "String"
        },
        "KeyPair": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to SSH",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PublicSubnet": {
            "ConstraintDescription": "PublicSubnet",
            "Description": "PublicSubnet",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ScaleCapacity": {
            "Default": "3",
            "Description": "Number servers to run",
            "Type": "String"
        },
        "VpcId": {
            "Description": "VPC",
            "Type": "AWS::EC2:VPC::Id"
        }
    },
    "Resources": {
        "AutoscalingGroup": {
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "ScaleCapacity"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": 5,
                "MinSize": 2,
                "VPCZoneIdentifier": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "CPUTooHigh": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Alarm if CPU too high",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoscalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "1",
                "InsufficientDataActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "60"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "CPUTooLow": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "ScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Alarm if CPU too low",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoscalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "30"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "InstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "LaunchConfiguration": {
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "ImageId": "ami-ed838091",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                "yum remove -y java",
                                "yum install -y java-1.8.0-openjdk",
                                "yum install --enablerepo=epel -y git",
                                "pip install ansible",
                                "/usr/local/bin/ansible-pull -U https://github.com/zhongjie526/ansible nodeserver.yml -i localhost",
                                "echo '*/1 * * * * /usr/local/bin/ansible-pull -U https://github.com/zhongjie526/ansible nodeserver.yml -i localhost' > /etc/cron.d/ansible-pull"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "LoadBalancer": {
            "Properties": {
                "ConnectionDrainingPolicy": {
                    "Enabled": true,
                    "Timeout": 10
                },
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "20",
                    "Target": "HTTP:3000/",
                    "Timeout": "15",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": "3000",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "3000",
                        "Protocol": "HTTP"
                    }
                ],
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Web load balancer security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "3000",
                        "IpProtocol": "tcp",
                        "ToPort": "3000"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "Policy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "PolicyName": "AllowS3",
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "Role": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "ScaleDownPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoscalingGroup"
                },
                "ScalingAdjustment": "-1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "ScaleUpPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoscalingGroup"
                },
                "ScalingAdjustment": "1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "SecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow SSH and TCP/3000 access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "103.6.150.248/32",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "3000",
                        "IpProtocol": "tcp",
                        "ToPort": "3000"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
